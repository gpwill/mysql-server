// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spectrum.proto

#include "spectrum.pb.h"
#include "spectrum.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace spectrum {

static const char* HeadNode_method_names[] = {
  "/spectrum.HeadNode/Propose",
};

std::unique_ptr< HeadNode::Stub> HeadNode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HeadNode::Stub> stub(new HeadNode::Stub(channel, options));
  return stub;
}

HeadNode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Propose_(HeadNode_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HeadNode::Stub::Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::spectrum::DataItemMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::DataItemMessage, ::spectrum::DataItemMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Propose_, context, request, response);
}

void HeadNode::Stub::async::Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::DataItemMessage, ::spectrum::DataItemMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Propose_, context, request, response, std::move(f));
}

void HeadNode::Stub::async::Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Propose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>* HeadNode::Stub::PrepareAsyncProposeRaw(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::DataItemMessage, ::spectrum::DataItemMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Propose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>* HeadNode::Stub::AsyncProposeRaw(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposeRaw(context, request, cq);
  result->StartCall();
  return result;
}

HeadNode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HeadNode_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HeadNode::Service, ::spectrum::DataItemMessage, ::spectrum::DataItemMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HeadNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::DataItemMessage* req,
             ::spectrum::DataItemMessage* resp) {
               return service->Propose(ctx, req, resp);
             }, this)));
}

HeadNode::Service::~Service() {
}

::grpc::Status HeadNode::Service::Propose(::grpc::ServerContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StorageNode_method_names[] = {
  "/spectrum.StorageNode/CreateTable",
  "/spectrum.StorageNode/WriteRow",
  "/spectrum.StorageNode/UpdateRow",
  "/spectrum.StorageNode/CreateReplica",
  "/spectrum.StorageNode/UpdateEpoch",
  "/spectrum.StorageNode/Prepare",
  "/spectrum.StorageNode/Accept",
  "/spectrum.StorageNode/Abort",
};

std::unique_ptr< StorageNode::Stub> StorageNode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageNode::Stub> stub(new StorageNode::Stub(channel, options));
  return stub;
}

StorageNode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateTable_(StorageNode_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteRow_(StorageNode_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRow_(StorageNode_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateReplica_(StorageNode_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateEpoch_(StorageNode_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Prepare_(StorageNode_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Accept_(StorageNode_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Abort_(StorageNode_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageNode::Stub::CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::spectrum::CreateTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

void StorageNode::Stub::async::CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>* StorageNode::Stub::PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::CreateTableResponse, ::spectrum::CreateTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>* StorageNode::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::spectrum::WriteRowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteRow_, context, request, response);
}

void StorageNode::Stub::async::WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteRow_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* StorageNode::Stub::PrepareAsyncWriteRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::WriteRowResponse, ::spectrum::WriteRowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteRow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* StorageNode::Stub::AsyncWriteRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteRowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::spectrum::WriteRowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRow_, context, request, response);
}

void StorageNode::Stub::async::UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRow_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* StorageNode::Stub::PrepareAsyncUpdateRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::WriteRowResponse, ::spectrum::WriteRowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* StorageNode::Stub::AsyncUpdateRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::spectrum::CreateReplicaResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateReplica_, context, request, response);
}

void StorageNode::Stub::async::CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateReplica_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateReplica_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>* StorageNode::Stub::PrepareAsyncCreateReplicaRaw(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::CreateReplicaResponseMessage, ::spectrum::CreateReplicaRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateReplica_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>* StorageNode::Stub::AsyncCreateReplicaRaw(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateReplicaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::spectrum::UpdateEpochResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateEpoch_, context, request, response);
}

void StorageNode::Stub::async::UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEpoch_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEpoch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>* StorageNode::Stub::PrepareAsyncUpdateEpochRaw(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::UpdateEpochResponseMessage, ::spectrum::UpdateEpochRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateEpoch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>* StorageNode::Stub::AsyncUpdateEpochRaw(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateEpochRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::spectrum::PrepareResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Prepare_, context, request, response);
}

void StorageNode::Stub::async::Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prepare_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prepare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>* StorageNode::Stub::PrepareAsyncPrepareRaw(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::PrepareResponseMessage, ::spectrum::PrepareRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Prepare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>* StorageNode::Stub::AsyncPrepareRaw(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::spectrum::AcceptResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Accept_, context, request, response);
}

void StorageNode::Stub::async::Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Accept_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Accept_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>* StorageNode::Stub::PrepareAsyncAcceptRaw(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::AcceptResponseMessage, ::spectrum::AcceptRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Accept_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>* StorageNode::Stub::AsyncAcceptRaw(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAcceptRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::spectrum::AbortResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Abort_, context, request, response);
}

void StorageNode::Stub::async::Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Abort_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Abort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>* StorageNode::Stub::PrepareAsyncAbortRaw(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spectrum::AbortResponseMessage, ::spectrum::AbortRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Abort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>* StorageNode::Stub::AsyncAbortRaw(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAbortRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageNode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::CreateTableRequest* req,
             ::spectrum::CreateTableResponse* resp) {
               return service->CreateTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::WriteRowRequest* req,
             ::spectrum::WriteRowResponse* resp) {
               return service->WriteRow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::WriteRowRequest* req,
             ::spectrum::WriteRowResponse* resp) {
               return service->UpdateRow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::CreateReplicaRequestMessage* req,
             ::spectrum::CreateReplicaResponseMessage* resp) {
               return service->CreateReplica(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::UpdateEpochRequestMessage* req,
             ::spectrum::UpdateEpochResponseMessage* resp) {
               return service->UpdateEpoch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::PrepareRequestMessage* req,
             ::spectrum::PrepareResponseMessage* resp) {
               return service->Prepare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::AcceptRequestMessage* req,
             ::spectrum::AcceptResponseMessage* resp) {
               return service->Accept(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spectrum::AbortRequestMessage* req,
             ::spectrum::AbortResponseMessage* resp) {
               return service->Abort(ctx, req, resp);
             }, this)));
}

StorageNode::Service::~Service() {
}

::grpc::Status StorageNode::Service::CreateTable(::grpc::ServerContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::WriteRow(::grpc::ServerContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::UpdateRow(::grpc::ServerContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::CreateReplica(::grpc::ServerContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::UpdateEpoch(::grpc::ServerContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::Prepare(::grpc::ServerContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::Accept(::grpc::ServerContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::Abort(::grpc::ServerContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace spectrum

