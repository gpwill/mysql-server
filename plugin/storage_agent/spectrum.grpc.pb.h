// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spectrum.proto
#ifndef GRPC_spectrum_2eproto__INCLUDED
#define GRPC_spectrum_2eproto__INCLUDED

#include "spectrum.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace spectrum {

class HeadNode final {
 public:
  static constexpr char const* service_full_name() {
    return "spectrum.HeadNode";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::spectrum::DataItemMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::DataItemMessage>> AsyncPropose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::DataItemMessage>>(AsyncProposeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::DataItemMessage>> PrepareAsyncPropose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::DataItemMessage>>(PrepareAsyncProposeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::DataItemMessage>* AsyncProposeRaw(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::DataItemMessage>* PrepareAsyncProposeRaw(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::spectrum::DataItemMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>> AsyncPropose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>>(AsyncProposeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>> PrepareAsyncPropose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>>(PrepareAsyncProposeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response, std::function<void(::grpc::Status)>) override;
      void Propose(::grpc::ClientContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>* AsyncProposeRaw(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::DataItemMessage>* PrepareAsyncProposeRaw(::grpc::ClientContext* context, const ::spectrum::DataItemMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Propose_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Propose(::grpc::ServerContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Propose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Propose() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Propose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Propose(::grpc::ServerContext* /*context*/, const ::spectrum::DataItemMessage* /*request*/, ::spectrum::DataItemMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPropose(::grpc::ServerContext* context, ::spectrum::DataItemMessage* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::DataItemMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Propose<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Propose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Propose() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::DataItemMessage, ::spectrum::DataItemMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::DataItemMessage* request, ::spectrum::DataItemMessage* response) { return this->Propose(context, request, response); }));}
    void SetMessageAllocatorFor_Propose(
        ::grpc::MessageAllocator< ::spectrum::DataItemMessage, ::spectrum::DataItemMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::DataItemMessage, ::spectrum::DataItemMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Propose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Propose(::grpc::ServerContext* /*context*/, const ::spectrum::DataItemMessage* /*request*/, ::spectrum::DataItemMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Propose(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::DataItemMessage* /*request*/, ::spectrum::DataItemMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Propose<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Propose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Propose() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Propose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Propose(::grpc::ServerContext* /*context*/, const ::spectrum::DataItemMessage* /*request*/, ::spectrum::DataItemMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Propose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Propose() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Propose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Propose(::grpc::ServerContext* /*context*/, const ::spectrum::DataItemMessage* /*request*/, ::spectrum::DataItemMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPropose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Propose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Propose() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Propose(context, request, response); }));
    }
    ~WithRawCallbackMethod_Propose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Propose(::grpc::ServerContext* /*context*/, const ::spectrum::DataItemMessage* /*request*/, ::spectrum::DataItemMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Propose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Propose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Propose() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::DataItemMessage, ::spectrum::DataItemMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::DataItemMessage, ::spectrum::DataItemMessage>* streamer) {
                       return this->StreamedPropose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Propose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Propose(::grpc::ServerContext* /*context*/, const ::spectrum::DataItemMessage* /*request*/, ::spectrum::DataItemMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPropose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::DataItemMessage,::spectrum::DataItemMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Propose<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Propose<Service > StreamedService;
};

class StorageNode final {
 public:
  static constexpr char const* service_full_name() {
    return "spectrum.StorageNode";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::spectrum::CreateTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateTableResponse>> AsyncCreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateTableResponse>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateTableResponse>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateTableResponse>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::spectrum::WriteRowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>> AsyncWriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>>(AsyncWriteRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>> PrepareAsyncWriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>>(PrepareAsyncWriteRowRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::spectrum::WriteRowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>> AsyncUpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>>(AsyncUpdateRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>> PrepareAsyncUpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>>(PrepareAsyncUpdateRowRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::spectrum::CreateReplicaResponseMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateReplicaResponseMessage>> AsyncCreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateReplicaResponseMessage>>(AsyncCreateReplicaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateReplicaResponseMessage>> PrepareAsyncCreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateReplicaResponseMessage>>(PrepareAsyncCreateReplicaRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::spectrum::UpdateEpochResponseMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::UpdateEpochResponseMessage>> AsyncUpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::UpdateEpochResponseMessage>>(AsyncUpdateEpochRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::UpdateEpochResponseMessage>> PrepareAsyncUpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::UpdateEpochResponseMessage>>(PrepareAsyncUpdateEpochRaw(context, request, cq));
    }
    virtual ::grpc::Status Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::spectrum::PrepareResponseMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::PrepareResponseMessage>> AsyncPrepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::PrepareResponseMessage>>(AsyncPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::PrepareResponseMessage>> PrepareAsyncPrepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::PrepareResponseMessage>>(PrepareAsyncPrepareRaw(context, request, cq));
    }
    virtual ::grpc::Status Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::spectrum::AcceptResponseMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AcceptResponseMessage>> AsyncAccept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AcceptResponseMessage>>(AsyncAcceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AcceptResponseMessage>> PrepareAsyncAccept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AcceptResponseMessage>>(PrepareAsyncAcceptRaw(context, request, cq));
    }
    virtual ::grpc::Status Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::spectrum::AbortResponseMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AbortResponseMessage>> AsyncAbort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AbortResponseMessage>>(AsyncAbortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AbortResponseMessage>> PrepareAsyncAbort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AbortResponseMessage>>(PrepareAsyncAbortRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateTableResponse>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateTableResponse>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>* AsyncWriteRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>* PrepareAsyncWriteRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>* AsyncUpdateRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::WriteRowResponse>* PrepareAsyncUpdateRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateReplicaResponseMessage>* AsyncCreateReplicaRaw(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::CreateReplicaResponseMessage>* PrepareAsyncCreateReplicaRaw(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::UpdateEpochResponseMessage>* AsyncUpdateEpochRaw(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::UpdateEpochResponseMessage>* PrepareAsyncUpdateEpochRaw(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::PrepareResponseMessage>* AsyncPrepareRaw(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::PrepareResponseMessage>* PrepareAsyncPrepareRaw(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AcceptResponseMessage>* AsyncAcceptRaw(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AcceptResponseMessage>* PrepareAsyncAcceptRaw(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AbortResponseMessage>* AsyncAbortRaw(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spectrum::AbortResponseMessage>* PrepareAsyncAbortRaw(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::spectrum::CreateTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>> AsyncCreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    ::grpc::Status WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::spectrum::WriteRowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>> AsyncWriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>>(AsyncWriteRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>> PrepareAsyncWriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>>(PrepareAsyncWriteRowRaw(context, request, cq));
    }
    ::grpc::Status UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::spectrum::WriteRowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>> AsyncUpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>>(AsyncUpdateRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>> PrepareAsyncUpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>>(PrepareAsyncUpdateRowRaw(context, request, cq));
    }
    ::grpc::Status CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::spectrum::CreateReplicaResponseMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>> AsyncCreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>>(AsyncCreateReplicaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>> PrepareAsyncCreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>>(PrepareAsyncCreateReplicaRaw(context, request, cq));
    }
    ::grpc::Status UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::spectrum::UpdateEpochResponseMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>> AsyncUpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>>(AsyncUpdateEpochRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>> PrepareAsyncUpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>>(PrepareAsyncUpdateEpochRaw(context, request, cq));
    }
    ::grpc::Status Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::spectrum::PrepareResponseMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>> AsyncPrepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>>(AsyncPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>> PrepareAsyncPrepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>>(PrepareAsyncPrepareRaw(context, request, cq));
    }
    ::grpc::Status Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::spectrum::AcceptResponseMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>> AsyncAccept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>>(AsyncAcceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>> PrepareAsyncAccept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>>(PrepareAsyncAcceptRaw(context, request, cq));
    }
    ::grpc::Status Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::spectrum::AbortResponseMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>> AsyncAbort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>>(AsyncAbortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>> PrepareAsyncAbort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>>(PrepareAsyncAbortRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateTable(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateRow(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response, std::function<void(::grpc::Status)>) override;
      void CreateReplica(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response, std::function<void(::grpc::Status)>) override;
      void UpdateEpoch(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response, std::function<void(::grpc::Status)>) override;
      void Prepare(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response, std::function<void(::grpc::Status)>) override;
      void Accept(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response, std::function<void(::grpc::Status)>) override;
      void Abort(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::CreateTableResponse>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::spectrum::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* AsyncWriteRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* PrepareAsyncWriteRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* AsyncUpdateRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::WriteRowResponse>* PrepareAsyncUpdateRowRaw(::grpc::ClientContext* context, const ::spectrum::WriteRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>* AsyncCreateReplicaRaw(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::CreateReplicaResponseMessage>* PrepareAsyncCreateReplicaRaw(::grpc::ClientContext* context, const ::spectrum::CreateReplicaRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>* AsyncUpdateEpochRaw(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::UpdateEpochResponseMessage>* PrepareAsyncUpdateEpochRaw(::grpc::ClientContext* context, const ::spectrum::UpdateEpochRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>* AsyncPrepareRaw(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::PrepareResponseMessage>* PrepareAsyncPrepareRaw(::grpc::ClientContext* context, const ::spectrum::PrepareRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>* AsyncAcceptRaw(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::AcceptResponseMessage>* PrepareAsyncAcceptRaw(::grpc::ClientContext* context, const ::spectrum::AcceptRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>* AsyncAbortRaw(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spectrum::AbortResponseMessage>* PrepareAsyncAbortRaw(::grpc::ClientContext* context, const ::spectrum::AbortRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTable_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteRow_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRow_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateReplica_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateEpoch_;
    const ::grpc::internal::RpcMethod rpcmethod_Prepare_;
    const ::grpc::internal::RpcMethod rpcmethod_Accept_;
    const ::grpc::internal::RpcMethod rpcmethod_Abort_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateTable(::grpc::ServerContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response);
    virtual ::grpc::Status WriteRow(::grpc::ServerContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response);
    virtual ::grpc::Status UpdateRow(::grpc::ServerContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response);
    virtual ::grpc::Status CreateReplica(::grpc::ServerContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response);
    virtual ::grpc::Status UpdateEpoch(::grpc::ServerContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response);
    virtual ::grpc::Status Prepare(::grpc::ServerContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response);
    virtual ::grpc::Status Accept(::grpc::ServerContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response);
    virtual ::grpc::Status Abort(::grpc::ServerContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTable() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::spectrum::CreateTableRequest* /*request*/, ::spectrum::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::spectrum::CreateTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::CreateTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteRow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteRow(::grpc::ServerContext* context, ::spectrum::WriteRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::WriteRowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRow(::grpc::ServerContext* context, ::spectrum::WriteRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::WriteRowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateReplica() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReplica(::grpc::ServerContext* /*context*/, const ::spectrum::CreateReplicaRequestMessage* /*request*/, ::spectrum::CreateReplicaResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateReplica(::grpc::ServerContext* context, ::spectrum::CreateReplicaRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::CreateReplicaResponseMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateEpoch() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEpoch(::grpc::ServerContext* /*context*/, const ::spectrum::UpdateEpochRequestMessage* /*request*/, ::spectrum::UpdateEpochResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEpoch(::grpc::ServerContext* context, ::spectrum::UpdateEpochRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::UpdateEpochResponseMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Prepare() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* /*context*/, const ::spectrum::PrepareRequestMessage* /*request*/, ::spectrum::PrepareResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepare(::grpc::ServerContext* context, ::spectrum::PrepareRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::PrepareResponseMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Accept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Accept() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Accept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accept(::grpc::ServerContext* /*context*/, const ::spectrum::AcceptRequestMessage* /*request*/, ::spectrum::AcceptResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccept(::grpc::ServerContext* context, ::spectrum::AcceptRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::AcceptResponseMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Abort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Abort() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Abort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Abort(::grpc::ServerContext* /*context*/, const ::spectrum::AbortRequestMessage* /*request*/, ::spectrum::AbortResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbort(::grpc::ServerContext* context, ::spectrum::AbortRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::spectrum::AbortResponseMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTable<WithAsyncMethod_WriteRow<WithAsyncMethod_UpdateRow<WithAsyncMethod_CreateReplica<WithAsyncMethod_UpdateEpoch<WithAsyncMethod_Prepare<WithAsyncMethod_Accept<WithAsyncMethod_Abort<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTable() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::CreateTableRequest* request, ::spectrum::CreateTableResponse* response) { return this->CreateTable(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTable(
        ::grpc::MessageAllocator< ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::spectrum::CreateTableRequest* /*request*/, ::spectrum::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTable(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::CreateTableRequest* /*request*/, ::spectrum::CreateTableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteRow() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response) { return this->WriteRow(context, request, response); }));}
    void SetMessageAllocatorFor_WriteRow(
        ::grpc::MessageAllocator< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteRow(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRow() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::WriteRowRequest* request, ::spectrum::WriteRowResponse* response) { return this->UpdateRow(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRow(
        ::grpc::MessageAllocator< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRow(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateReplica() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::CreateReplicaRequestMessage* request, ::spectrum::CreateReplicaResponseMessage* response) { return this->CreateReplica(context, request, response); }));}
    void SetMessageAllocatorFor_CreateReplica(
        ::grpc::MessageAllocator< ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReplica(::grpc::ServerContext* /*context*/, const ::spectrum::CreateReplicaRequestMessage* /*request*/, ::spectrum::CreateReplicaResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateReplica(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::CreateReplicaRequestMessage* /*request*/, ::spectrum::CreateReplicaResponseMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateEpoch() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::UpdateEpochRequestMessage* request, ::spectrum::UpdateEpochResponseMessage* response) { return this->UpdateEpoch(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateEpoch(
        ::grpc::MessageAllocator< ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEpoch(::grpc::ServerContext* /*context*/, const ::spectrum::UpdateEpochRequestMessage* /*request*/, ::spectrum::UpdateEpochResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateEpoch(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::UpdateEpochRequestMessage* /*request*/, ::spectrum::UpdateEpochResponseMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Prepare() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::PrepareRequestMessage* request, ::spectrum::PrepareResponseMessage* response) { return this->Prepare(context, request, response); }));}
    void SetMessageAllocatorFor_Prepare(
        ::grpc::MessageAllocator< ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* /*context*/, const ::spectrum::PrepareRequestMessage* /*request*/, ::spectrum::PrepareResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepare(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::PrepareRequestMessage* /*request*/, ::spectrum::PrepareResponseMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Accept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Accept() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::AcceptRequestMessage* request, ::spectrum::AcceptResponseMessage* response) { return this->Accept(context, request, response); }));}
    void SetMessageAllocatorFor_Accept(
        ::grpc::MessageAllocator< ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Accept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accept(::grpc::ServerContext* /*context*/, const ::spectrum::AcceptRequestMessage* /*request*/, ::spectrum::AcceptResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Accept(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::AcceptRequestMessage* /*request*/, ::spectrum::AcceptResponseMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Abort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Abort() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spectrum::AbortRequestMessage* request, ::spectrum::AbortResponseMessage* response) { return this->Abort(context, request, response); }));}
    void SetMessageAllocatorFor_Abort(
        ::grpc::MessageAllocator< ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Abort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Abort(::grpc::ServerContext* /*context*/, const ::spectrum::AbortRequestMessage* /*request*/, ::spectrum::AbortResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Abort(
      ::grpc::CallbackServerContext* /*context*/, const ::spectrum::AbortRequestMessage* /*request*/, ::spectrum::AbortResponseMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateTable<WithCallbackMethod_WriteRow<WithCallbackMethod_UpdateRow<WithCallbackMethod_CreateReplica<WithCallbackMethod_UpdateEpoch<WithCallbackMethod_Prepare<WithCallbackMethod_Accept<WithCallbackMethod_Abort<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTable() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::spectrum::CreateTableRequest* /*request*/, ::spectrum::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteRow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateReplica() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReplica(::grpc::ServerContext* /*context*/, const ::spectrum::CreateReplicaRequestMessage* /*request*/, ::spectrum::CreateReplicaResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateEpoch() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEpoch(::grpc::ServerContext* /*context*/, const ::spectrum::UpdateEpochRequestMessage* /*request*/, ::spectrum::UpdateEpochResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Prepare() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* /*context*/, const ::spectrum::PrepareRequestMessage* /*request*/, ::spectrum::PrepareResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Accept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Accept() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Accept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accept(::grpc::ServerContext* /*context*/, const ::spectrum::AcceptRequestMessage* /*request*/, ::spectrum::AcceptResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Abort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Abort() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Abort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Abort(::grpc::ServerContext* /*context*/, const ::spectrum::AbortRequestMessage* /*request*/, ::spectrum::AbortResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTable() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::spectrum::CreateTableRequest* /*request*/, ::spectrum::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteRow() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WriteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteRow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRow() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateReplica() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReplica(::grpc::ServerContext* /*context*/, const ::spectrum::CreateReplicaRequestMessage* /*request*/, ::spectrum::CreateReplicaResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateReplica(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateEpoch() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEpoch(::grpc::ServerContext* /*context*/, const ::spectrum::UpdateEpochRequestMessage* /*request*/, ::spectrum::UpdateEpochResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEpoch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Prepare() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* /*context*/, const ::spectrum::PrepareRequestMessage* /*request*/, ::spectrum::PrepareResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Accept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Accept() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Accept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accept(::grpc::ServerContext* /*context*/, const ::spectrum::AcceptRequestMessage* /*request*/, ::spectrum::AcceptResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccept(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Abort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Abort() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Abort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Abort(::grpc::ServerContext* /*context*/, const ::spectrum::AbortRequestMessage* /*request*/, ::spectrum::AbortResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTable() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::spectrum::CreateTableRequest* /*request*/, ::spectrum::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteRow() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteRow(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteRow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRow() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRow(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateReplica() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateReplica(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReplica(::grpc::ServerContext* /*context*/, const ::spectrum::CreateReplicaRequestMessage* /*request*/, ::spectrum::CreateReplicaResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateReplica(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateEpoch() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateEpoch(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEpoch(::grpc::ServerContext* /*context*/, const ::spectrum::UpdateEpochRequestMessage* /*request*/, ::spectrum::UpdateEpochResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateEpoch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Prepare() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Prepare(context, request, response); }));
    }
    ~WithRawCallbackMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* /*context*/, const ::spectrum::PrepareRequestMessage* /*request*/, ::spectrum::PrepareResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Accept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Accept() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Accept(context, request, response); }));
    }
    ~WithRawCallbackMethod_Accept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accept(::grpc::ServerContext* /*context*/, const ::spectrum::AcceptRequestMessage* /*request*/, ::spectrum::AcceptResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Accept(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Abort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Abort() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Abort(context, request, response); }));
    }
    ~WithRawCallbackMethod_Abort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Abort(::grpc::ServerContext* /*context*/, const ::spectrum::AbortRequestMessage* /*request*/, ::spectrum::AbortResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Abort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTable() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::CreateTableRequest, ::spectrum::CreateTableResponse>* streamer) {
                       return this->StreamedCreateTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::spectrum::CreateTableRequest* /*request*/, ::spectrum::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::CreateTableRequest,::spectrum::CreateTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteRow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>* streamer) {
                       return this->StreamedWriteRow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteRow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::WriteRowRequest,::spectrum::WriteRowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRow() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::WriteRowRequest, ::spectrum::WriteRowResponse>* streamer) {
                       return this->StreamedUpdateRow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRow(::grpc::ServerContext* /*context*/, const ::spectrum::WriteRowRequest* /*request*/, ::spectrum::WriteRowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::WriteRowRequest,::spectrum::WriteRowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateReplica() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::CreateReplicaRequestMessage, ::spectrum::CreateReplicaResponseMessage>* streamer) {
                       return this->StreamedCreateReplica(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateReplica(::grpc::ServerContext* /*context*/, const ::spectrum::CreateReplicaRequestMessage* /*request*/, ::spectrum::CreateReplicaResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateReplica(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::CreateReplicaRequestMessage,::spectrum::CreateReplicaResponseMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateEpoch() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::UpdateEpochRequestMessage, ::spectrum::UpdateEpochResponseMessage>* streamer) {
                       return this->StreamedUpdateEpoch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateEpoch(::grpc::ServerContext* /*context*/, const ::spectrum::UpdateEpochRequestMessage* /*request*/, ::spectrum::UpdateEpochResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateEpoch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::UpdateEpochRequestMessage,::spectrum::UpdateEpochResponseMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Prepare() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::PrepareRequestMessage, ::spectrum::PrepareResponseMessage>* streamer) {
                       return this->StreamedPrepare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* /*context*/, const ::spectrum::PrepareRequestMessage* /*request*/, ::spectrum::PrepareResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::PrepareRequestMessage,::spectrum::PrepareResponseMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Accept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Accept() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::AcceptRequestMessage, ::spectrum::AcceptResponseMessage>* streamer) {
                       return this->StreamedAccept(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Accept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Accept(::grpc::ServerContext* /*context*/, const ::spectrum::AcceptRequestMessage* /*request*/, ::spectrum::AcceptResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAccept(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::AcceptRequestMessage,::spectrum::AcceptResponseMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Abort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Abort() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spectrum::AbortRequestMessage, ::spectrum::AbortResponseMessage>* streamer) {
                       return this->StreamedAbort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Abort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Abort(::grpc::ServerContext* /*context*/, const ::spectrum::AbortRequestMessage* /*request*/, ::spectrum::AbortResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAbort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spectrum::AbortRequestMessage,::spectrum::AbortResponseMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_WriteRow<WithStreamedUnaryMethod_UpdateRow<WithStreamedUnaryMethod_CreateReplica<WithStreamedUnaryMethod_UpdateEpoch<WithStreamedUnaryMethod_Prepare<WithStreamedUnaryMethod_Accept<WithStreamedUnaryMethod_Abort<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_WriteRow<WithStreamedUnaryMethod_UpdateRow<WithStreamedUnaryMethod_CreateReplica<WithStreamedUnaryMethod_UpdateEpoch<WithStreamedUnaryMethod_Prepare<WithStreamedUnaryMethod_Accept<WithStreamedUnaryMethod_Abort<Service > > > > > > > > StreamedService;
};

}  // namespace spectrum


#endif  // GRPC_spectrum_2eproto__INCLUDED
